<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo + next + github</title>
    <url>/2024/07/21/hello-world/</url>
    <content><![CDATA[<h3 id="如何搭建一个自己的博客"><a href="#如何搭建一个自己的博客" class="headerlink" title="如何搭建一个自己的博客"></a>如何搭建一个自己的博客</h3><p>首先你要确保自己有node.js和git</p>
<p>node.js(<a href="https://nodejs.cn/">Node.js 中文网 (nodejs.cn)</a>)你可以在这里根据自己的型号选取对应的版本</p>
<p>git(<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a>)同理</p>
<p>这是我的版本号</p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721114339503.png" alt="image-20240721114339503"></p>
<p>首先在电脑创建一个用来存储你博客的文件夹，这里我在D盘里命名为blog</p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>在cmd窗口输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>等待一段时间。。。</p>
<p>如果出现<img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721082650365.png" alt="image-20240721082650365"></p>
<p>则是你网络不好</p>
<p>打开blog文件夹，右键空白处，找到Git Bash Here,打开</p>
<p><strong>输入<code>hexo init</code> 初始化博客</strong></p>
<p>出现这种问题可能是对于磁盘的权限没开</p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721090940837.png" alt="image-20240721090940837"></p>
<p>需要右键D盘(我的blog是在D盘，右键属性，找到安全，进行编辑)然后再hexo init</p>
<p>成功是这样的<img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721092114177.png" alt="image-20240721092114177"></p>
<p><strong>输入<code>hexo g</code>生成静态文件</strong></p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721092134943.png" alt="image-20240721092134943"></p>
<p><strong>输入<code>hexo s</code>部署到本地</strong></p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721092158156.png" alt="image-20240721092158156"></p>
<p>我们到<a href="http://localhost:4000/">http://localhost:4000</a></p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721092223395.png" alt="image-20240721092223395"></p>
<p>成功！</p>
<p>到这里基本就完成一半了</p>
<p>这里我是用的是<strong>Next</strong> 主题，你们也可以用其它主题的<a href="https://hexo.io/plugins/">Plugins | Hexo</a>，最好还是不要花里胡哨，简洁就好</p>
<p>我们先下载安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus </span><br></pre></td></tr></table></figure>

<p>出现这种情况也是网络不好，多下几次<img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721094323942.png" alt="image-20240721094323942"></p>
<p>成功<img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721094253190.png" alt="image-20240721094253190"></p>
<p>下载主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721094437754.png" alt="image-20240721094437754"></p>
<p>会在theme文件夹里多一个next文件夹，就是成功</p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721094508046.png" alt="image-20240721094508046"></p>
<p>在blog文件夹里找到配置文件_config.yml,进行修改</p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721094935810.png" alt="image-20240721094935810"></p>
<p>找到里面的<img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721095007981.png" alt="image-20240721095007981"></p>
<p>将landscape修改为next(你的theme的文件夹也是你对应的主题)</p>
<p>然后我们在本地上查看一下效果</p>
<p>①清除缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>②成静态文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>③部署到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721095413731.png" alt="image-20240721095413731"></p>
<p>打开网页<a href="http://localhost:4000/![image-20240721095500405](https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721095500405.png)">http://localhost:4000/![image-20240721095500405](https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721095500405.png)</a></p>
<p>成功</p>
<h4 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h4><p>然后我们要部署到github</p>
<p>安装插件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721100803265.png" alt="image-20240721100803265"></p>
<p>如果老毛病，多下几次，因为网络不好</p>
<p>来到github,点击右上角的+号，选取New repository,新建一个仓库</p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721100908476.png" alt="image-20240721100908476"></p>
<p>仓库的命名格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你的github用户名.github.io</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721101049441.png" alt="image-20240721101049441"></p>
<p>后面默认就行。</p>
<p>他会弹到这里，我们复制https</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/szero-miu/szero-miu.github.io.git</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721101306655.png" alt="image-20240721101306655"></p>
<p>找到blog的_config.yml，打开找到deploy</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">复制的地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721101630616.png" alt="image-20240721101630616"></p>
<p>然后依次输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">或者hexo clean &amp;&amp; hexo g &amp;&amp; hexo d </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721101927278.png" alt="image-20240721101927278"></p>
<p>成功部署到github</p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721102237065.png" alt="image-20240721102237065"></p>
<p>出现这种问题是因为</p>
<p>你需要为 Git 配置你的用户名和电子邮件地址。可以用以下命令设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;szero-miu&quot;</span><br><span class="line">git config --global user.email &quot;2072896619@qq.com&quot;</span><br></pre></td></tr></table></figure>

<p>再次运行</p>
<p>会弹出</p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721102416297.png" alt="image-20240721102416297"></p>
<p>此时，你选哪个都行</p>
<p>再次运行，成功页面，警告可以忽视</p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721103850004.png" alt="image-20240721103850004"></p>
<p>然后打开<a href="https://szero-miu.github.io/">https://szero-miu.github.io</a> (根据自己的博客网页填)我们可以看到网页</p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721104000399.png" alt="image-20240721104000399"></p>
<p>这就是在github上部署成功了</p>
<p>要进行部署文件的话，我们找到blog的source的_posts进行上传，然后部署就行了</p>
<p><img src="https://raw.githubusercontent.com/szero-miu/szero-miu.github.io/master/images/image-20240721104133822.png" alt="image-20240721104133822"></p>
<p>到这里基本上基本就完成了</p>
<p>后面就是进行优化了</p>
<h3 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h3><p>主要改两个文件都是_config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">/hexo/_config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="string">/hexo/themes/next/_config.yml</span></span><br></pre></td></tr></table></figure>

<p>第一个我们称为配置①第二个我们称为配置②</p>
<h4 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h4><p>在配置①里，找到下面，我们修改language</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="标签及分类"><a href="#标签及分类" class="headerlink" title="标签及分类"></a>标签及分类</h4><p>在配置②里，找到<strong>menu</strong>，把我们需要的标签的前面的#去掉</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<h4 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h4><p>配置②，找到scheme，选一个喜欢的去掉#</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>

<h4 id="隐藏网页底部"><a href="#隐藏网页底部" class="headerlink" title="隐藏网页底部"></a>隐藏网页底部</h4><p>打开 <strong>themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig</strong></p>
<p>找到下面，注释或删除</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;div class=&quot;copyright&quot;&gt;</span></span><br><span class="line"><span class="comment">  &#123;% set copyright_year = date(null, &#x27;YYYY&#x27;) %&#125;</span></span><br><span class="line"><span class="comment">  &amp;copy; &#123;% if theme.footer.since and theme.footer.since != copyright_year %&#125;&#123;&#123; theme.footer.since &#125;&#125; – &#123;% endif %&#125;</span></span><br><span class="line"><span class="comment">  &lt;span itemprop=&quot;copyrightYear&quot;&gt;&#123;&#123; copyright_year &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">  &lt;span class=&quot;with-love&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;i class=&quot;&#123;&#123; theme.footer.icon.name &#125;&#125;&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="comment">  &lt;/span&gt;</span></span><br><span class="line"><span class="comment">  &lt;span class=&quot;author&quot; itemprop=&quot;copyrightHolder&quot;&gt;&#123;&#123; theme.footer.copyright or author &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  &#123;%- if config.symbols_count_time.total_symbols %&#125;</span></span><br><span class="line"><span class="comment">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span></span><br><span class="line"><span class="comment">      &lt;i class=&quot;fa fa-chart-area&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="comment">    &lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &#123;%- if theme.symbols_count_time.item_text_total %&#125;</span></span><br><span class="line"><span class="comment">      &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;symbols_count_time.count_total&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &#123;%- endif %&#125;</span></span><br><span class="line"><span class="comment">    &lt;span title=&quot;&#123;&#123; __(&#x27;symbols_count_time.count_total&#x27;) &#125;&#125;&quot;&gt;&#123;&#123; symbolsCountTotal(site) &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">  &#123;%- endif %&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  &#123;%- if config.symbols_count_time.total_time %&#125;</span></span><br><span class="line"><span class="comment">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span></span><br><span class="line"><span class="comment">      &lt;i class=&quot;fa fa-coffee&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="comment">    &lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &#123;%- if theme.symbols_count_time.item_text_total %&#125;</span></span><br><span class="line"><span class="comment">      &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;symbols_count_time.time_total&#x27;) &#125;&#125; &amp;asymp;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">    &#123;%- endif %&#125;</span></span><br><span class="line"><span class="comment">    &lt;span title=&quot;&#123;&#123; __(&#x27;symbols_count_time.time_total&#x27;) &#125;&#125;&quot;&gt;&#123;&#123; symbolsTimeTotal(site, config.symbols_count_time.awl, config.symbols_count_time.wpm, __(&#x27;symbols_count_time.time_minutes&#x27;)) &#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">  &#123;%- endif %&#125;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;%- if theme.footer.powered %&#125;</span></span><br><span class="line"><span class="comment">  &lt;div class=&quot;powered-by&quot;&gt;</span></span><br><span class="line"><span class="comment">    &#123;%- set next_site = &#x27;https://theme-next.org&#x27; %&#125;</span></span><br><span class="line"><span class="comment">    &#123;%- if theme.scheme !== &#x27;Gemini&#x27; %&#125;</span></span><br><span class="line"><span class="comment">      &#123;%- set next_site = &#x27;https://&#x27; + theme.scheme | lower + &#x27;.theme-next.org&#x27; %&#125;</span></span><br><span class="line"><span class="comment">    &#123;%- endif %&#125;</span></span><br><span class="line"><span class="comment">    &#123;&#123;- __(&#x27;footer.powered&#x27;, next_url(&#x27;https://hexo.io&#x27;, &#x27;Hexo&#x27;, &#123;class: &#x27;theme-link&#x27;&#125;) + &#x27; &amp; &#x27; + next_url(next_site, &#x27;NexT.&#x27; + theme.scheme, &#123;class: &#x27;theme-link&#x27;&#125;)) &#125;&#125;</span></span><br><span class="line"><span class="comment">  &lt;/div&gt;</span></span><br><span class="line"><span class="comment">&#123;%- endif %&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>要是不一样的话找到class对应的部分进行注释或删除</p>
<h4 id="文章添加阴影"><a href="#文章添加阴影" class="headerlink" title="文章添加阴影"></a>文章添加阴影</h4><p>创建 &#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_custom&#x2F;custom.styl，添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">.post</span> &#123;</span><br><span class="line"><span class="attr">margin-top:</span> <span class="string">60px;</span></span><br><span class="line"><span class="attr">margin-bottom:</span> <span class="string">60px;</span></span><br><span class="line"><span class="attr">padding:</span> <span class="string">25px;</span></span><br><span class="line"><span class="string">-webkit-box-shadow:</span> <span class="number">0</span> <span class="number">0</span> <span class="string">5px</span> <span class="string">rgba(202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span><span class="string">);</span></span><br><span class="line"><span class="string">-moz-box-shadow:</span> <span class="number">0</span> <span class="number">0</span> <span class="string">5px</span> <span class="string">rgba(202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span><span class="string">);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="浏览页面显示当前浏览进度"><a href="#浏览页面显示当前浏览进度" class="headerlink" title="浏览页面显示当前浏览进度"></a>浏览页面显示当前浏览进度</h4><p>打开 themes&#x2F;next&#x2F;_config.yml，搜索关键字 <code>scrollpercent</code>，把 false 改为 true。</p>
<h4 id="Local-Search本地搜索"><a href="#Local-Search本地搜索" class="headerlink" title="Local Search本地搜索"></a>Local Search本地搜索</h4><p>安装插件hexo-generator-searchdb,执行以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>



<p>修改hexo&#x2F;_config.yml配置①，新增以下内容到任意位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#search function</span><br><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br><span class="line">format: html</span><br><span class="line">limit: 10000</span><br></pre></td></tr></table></figure>



<p>编辑 配置②，启用本地搜索功能：</p>
<h4 id="Local-search"><a href="#Local-search" class="headerlink" title="Local search"></a>Local search</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">enable: true</span><br></pre></td></tr></table></figure>

<h4 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h4><p>在 EasyIcon 中找一张（32 * 32）的 ico 图标，或者去别的网站下载或者制作，并将图标名称改为 favicon.ico，然后把图标放在 &#x2F;themes&#x2F;next&#x2F;source&#x2F;images 里，并且修改配置②：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon.ico</span><br><span class="line">  medium: /images/favicon.ico</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure>

<h3 id="评论标签实现"><a href="#评论标签实现" class="headerlink" title="评论标签实现"></a>评论标签实现</h3><h5 id="categories创建步骤"><a href="#categories创建步骤" class="headerlink" title="categories创建步骤"></a>categories创建步骤</h5><ul>
<li><p><strong>新建一个页面，命名为categories。命令如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在myBlog&#x2F;source下会新生成一个新的文件夹categories<br>，在该文件夹下会有一个index.md文件</p>
</blockquote>
</li>
<li><p><strong>编辑categories文件夹下的index.md</strong></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2024-07-21 22:22:59</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<h4 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h4><p>打开主题配置文件，搜索关键字 Sidebar Avatar 进行定位，将 avatar 的值设置成头像图片的链接地址即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="comment">#/images/avatar.gif</span></span><br><span class="line"><span class="comment">#修改头像边框为圆形</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#鼠标放置头像时，头像旋转特效</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="侧边栏的位置"><a href="#侧边栏的位置" class="headerlink" title="侧边栏的位置"></a>侧边栏的位置</h4><p>找到sidebar，将position设置成你想要的位置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line"><span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line"><span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line"><span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line"><span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line"><span class="attr">display:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure>

<p>post - 默认行为，在文章页面（拥有目录列表）时显示</p>
<p>always - 在所有页面中都显示</p>
<p>hide - 在所有页面中都隐藏（可以手动展开）</p>
<p>remove - 完全移除</p>
<h4 id="文章统计"><a href="#文章统计" class="headerlink" title="文章统计"></a>文章统计</h4><p>文章阅读数。站点访问数和点击数。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>

<h4 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">true</span> <span class="comment">#目录全部展开</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span> <span class="comment">#是否显示复制成功</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="各版块透明度修改"><a href="#各版块透明度修改" class="headerlink" title="各版块透明度修改"></a>各版块透明度修改</h4><h5 id="内容板块透明"><a href="#内容板块透明" class="headerlink" title="内容板块透明"></a>内容板块透明</h5><p>博客根目录 themes\next\source\css_schemes\Pisces_layout.styl文件 .content-wrap 标签下 background: white修改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">background:</span> <span class="string">rgba(255,255,255,0.6);</span> </span><br></pre></td></tr></table></figure>

<h5 id="菜单栏背景"><a href="#菜单栏背景" class="headerlink" title="菜单栏背景"></a>菜单栏背景</h5><p>博客根目录 themes\next\source\css_schemes\Pisces_layout.styl文件.header-inner标签下 background: white修改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">background:</span> <span class="string">rgba(255,255,255,0.6);</span></span><br></pre></td></tr></table></figure>

<h5 id="站点概况背景"><a href="#站点概况背景" class="headerlink" title="站点概况背景"></a>站点概况背景</h5><p>博客根目录themes\next\source\css_schemes\Pisces_sidebar.styl 文件.sidebar-inner 标签下 background: white修改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">background:</span> <span class="string">rgba(255,255,255,0.7);</span> <span class="string">//0.7是透明度</span></span><br></pre></td></tr></table></figure>

<h3 id="博客背景图片"><a href="#博客背景图片" class="headerlink" title="博客背景图片"></a>博客背景图片</h3><p>在<code>themes/next/source/css/_custom/custom.styl</code>中添加CSS样式</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 背景图片</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(https://背景图.jpg);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="网页显示GIF"><a href="#网页显示GIF" class="headerlink" title="网页显示GIF"></a>网页显示GIF</h4><p><strong>1. 准备 GIF 文件</strong></p>
<p>确保你有一个 GIF 文件，并将其放在 Hexo 站点的 <code>source</code> 目录下，例如 <code>source/images/your-image.gif</code>。</p>
<p><strong>2. 修改模板文件</strong></p>
<p>找到你要修改的模板文件，一般来说，主页的模板文件是 <code>themes/your-theme/layout/index.ejs</code>（或者 <code>index.pug</code>、<code>index.njk</code>，具体取决于你使用的模板引擎）。</p>
<p>在模板文件中，你需要添加一个 <code>&lt;img&gt;</code> 标签来显示 GIF，并使用 CSS 将其定位到页面的左下角。</p>
<p><strong>3. 添加 HTML 和 CSS</strong></p>
<p>在模板文件（如 index.html）的适当位置，添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/your-image.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;GIF Image&quot;</span> <span class="attr">class</span>=<span class="string">&quot;gif-image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>确保 <code>src</code> 属性的路径指向你的 GIF 文件。</p>
<p><strong>在 CSS 文件中添加样式</strong></p>
<p>接下来，你需要给 GIF 添加样式，以便将其定位到页面的左下角。你可以在主题的 CSS 文件中添加这些样式，例如 <code>themes/your-theme/source/css/style.css</code>，或者在 <code>&lt;head&gt;</code> 中直接添加内联样式（不推荐，但可以用于快速测试）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gif-image</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>; <span class="comment">/* 根据需要调整宽度 */</span></span><br><span class="line">    <span class="attribute">height</span>: auto; <span class="comment">/* 保持 GIF 的纵横比 */</span></span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">9999</span>; <span class="comment">/* 确保 GIF 显示在其他内容之上 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>生成并查看效果</strong></p>
<p>保存模板文件和 CSS 文件，然后重新生成你的站点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<p>在浏览器中访问你的 Hexo 站点，应该可以看到 GIF 插图固定在页面的左下角。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠标拖尾效果</title>
    <url>/2024/07/27/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h3><h3 id="8-字符串转换整数"><a href="#8-字符串转换整数" class="headerlink" title="[8]字符串转换整数"></a>[8]字符串转换整数</h3><p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数。</p>
<p>函数 <code>myAtoi(string s)</code> 的算法如下：</p>
<ol>
<li><strong>空格：</strong>读入字符串并丢弃无用的前导空格（<code>&quot; &quot;</code>）</li>
<li><strong>符号：</strong>检查下一个字符（假设还未到字符末尾）为 <code>&#39;-&#39;</code> 还是 <code>&#39;+&#39;</code>。如果两者都不存在，则假定结果为正。</li>
<li><strong>转换：</strong>通过跳过前置零来读取该整数，直到遇到非数字字符或到达字符串的结尾。如果没有读取数字，则结果为0。</li>
<li><strong>舍入：</strong>如果整数数超过 32 位有符号整数范围 <code>[−2^31, 2^31 − 1]</code> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <code>−2^31</code> 的整数应该被舍入为 <code>−2^31</code> ，大于 <code>2^31 − 1</code> 的整数应该被舍入为 <code>2^31 − 1</code> 。</li>
</ol>
<p>返回整数作为最终结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myAtoi</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    s = s.lstrip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化符号变量sign，用于记录数字的正负(1表示正，-1表示负)</span></span><br><span class="line">    sign = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> s[i] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        sign = -<span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> s[i] == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历字符串，将字符转换为整数</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[i].isdigit():</span><br><span class="line">        res = res * <span class="number">10</span> + <span class="built_in">int</span>(s[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    res *= sign</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义32位整数的范围</span></span><br><span class="line">    INT_MIN, INT_MAX = -<span class="number">2</span>**<span class="number">31</span>, <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> res &lt; INT_MIN:</span><br><span class="line">        <span class="keyword">return</span> INT_MIN</span><br><span class="line">    <span class="keyword">if</span> res &gt; INT_MAX:</span><br><span class="line">        <span class="keyword">return</span> INT_MAX</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果结果在范围内，返回结果</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(myAtoi(<span class="string">&quot;-42&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">longest_common_prefix</span>(<span class="params">strs</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">#将第一个字符串作为比较的基础</span></span><br><span class="line">    prefix=strs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> strs[<span class="number">1</span>:]:</span><br><span class="line">        <span class="comment">#检查当前前缀与下一个字符串的公共前缀</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> string.startswith(prefix):</span><br><span class="line">            <span class="comment">#如果当前前缀不是公共前缀，则缩短前缀</span></span><br><span class="line">            prefix=prefix[:-<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#如果前缀缩短到空字符串，则没有公共前缀</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> prefix:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> prefix</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_input</span>():</span><br><span class="line">    <span class="comment">#获取用户输入的字符串个数n</span></span><br><span class="line">    n=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入字符串个数:&quot;</span>))</span><br><span class="line">    <span class="comment">#获取用户输入的n个字符串，并存储在列表中</span></span><br><span class="line">    strings=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        s=<span class="built_in">input</span>(<span class="string">f&quot;请输入第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>个字符串:&quot;</span>)</span><br><span class="line">        strings.append(s)</span><br><span class="line">    <span class="keyword">return</span> strings</span><br><span class="line">strings=get_input()</span><br><span class="line"><span class="built_in">print</span>(longest_common_prefix(strings))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>python知识点</title>
    <url>/2024/08/11/python/</url>
    <content><![CDATA[<h1 id="python-learn"><a href="#python-learn" class="headerlink" title="python-learn"></a>python-learn</h1><h3 id="with-open的使用"><a href="#with-open的使用" class="headerlink" title="with open的使用"></a>with open的使用</h3><p>在Python中，<code>with open</code> 语句是一种上下文管理器，用于打开文件，并在代码块执行完毕后自动关闭文件。这种方式比传统的 <code>open</code> 和 <code>close</code> 方法更安全，因为它确保了即使在发生异常的情况下文件也能被正确关闭。<br>下面是 <code>with open</code> 的基本用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;filename.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="comment"># 在这里进行文件操作</span></span><br><span class="line">    content = file.read()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>
<p>这里是 <code>with open</code> 语句的组成部分：</p>
<ul>
<li><code>&#39;filename.txt&#39;</code>：要打开的文件的名称。</li>
<li><code>&#39;r&#39;</code>：文件打开模式。<code>&#39;r&#39;</code> 表示读取模式（默认值），其他常用的模式包括 <code>&#39;w&#39;</code>（写入模式）、<code>&#39;a&#39;</code>（追加模式）、<code>&#39;b&#39;</code>（二进制模式）等。</li>
<li><code>file</code>：文件对象，你可以在代码块中使用它来读取或写入文件。<br>以下是打开文件的不同模式：</li>
<li><code>&#39;r&#39;</code>：只读模式（默认值）。</li>
<li><code>&#39;w&#39;</code>：写入模式，如果文件存在则覆盖，不存在则创建。</li>
<li><code>&#39;x&#39;</code>：独占创建模式，如果文件已存在则引发异常。</li>
<li><code>&#39;a&#39;</code>：追加模式，如果文件存在则在文件末尾追加内容，不存在则创建。</li>
<li><code>&#39;b&#39;</code>：二进制模式，可以与 <code>&#39;r&#39;</code>、<code>&#39;w&#39;</code>、<code>&#39;x&#39;</code>、<code>&#39;a&#39;</code> 结合使用，例如 <code>&#39;rb&#39;</code>、<code>&#39;wb&#39;</code> 等。</li>
<li><code>&#39;t&#39;</code>：文本模式（默认值），可以与 <code>&#39;r&#39;</code>、<code>&#39;w&#39;</code>、<code>&#39;x&#39;</code>、<code>&#39;a&#39;</code> 结合使用，例如 <code>&#39;rt&#39;</code>、<code>&#39;wt&#39;</code> 等。<br>下面是一些使用 <code>with open</code> 的例子：</li>
</ul>
<h4 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;filename.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure>
<h4 id="写入文件内容"><a href="#写入文件内容" class="headerlink" title="写入文件内容"></a>写入文件内容</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;filename.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;Hello, World!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="追加文件内容"><a href="#追加文件内容" class="headerlink" title="追加文件内容"></a>追加文件内容</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;filename.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;\nHello, again!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="读取文件并处理每一行"><a href="#读取文件并处理每一行" class="headerlink" title="读取文件并处理每一行"></a>读取文件并处理每一行</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;filename.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="built_in">print</span>(line.strip())  <span class="comment"># 使用strip()移除行尾的换行符</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>with open</code> 可以确保文件操作完成后，无论是否发生异常，文件都会被正确关闭。这是处理文件的首选方法。</p>
<p>在Python中，使用<code>with open</code>语句可以方便地打开文件进行读写操作，并将内容保存到指定的文件夹中。下面是一个基本的例子，展示如何将文本保存到特定文件夹的文件中：<br>首先，确保你有权限在指定的文件夹中创建或写入文件。以下步骤假设你已经有了一个名为<code>data_folder</code>的文件夹，并且你想在该文件夹中创建一个名为<code>example.txt</code>的文件，并向其中写入一些文本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确定文件夹路径和文件名</span></span><br><span class="line">folder_path = <span class="string">&#x27;data_folder&#x27;</span>  <span class="comment"># 请确保这个文件夹已经存在</span></span><br><span class="line">file_name = <span class="string">&#x27;example.txt&#x27;</span></span><br><span class="line">file_path = os.path.join(folder_path, file_name)</span><br><span class="line"><span class="comment"># 要写入的内容</span></span><br><span class="line">text_to_write = <span class="string">&quot;这是要写入文件的内容。\n&quot;</span></span><br><span class="line"><span class="comment"># 使用with open语句写入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(text_to_write)</span><br><span class="line"><span class="comment"># 文件写入操作完成</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;文件已保存到 <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这里解释一下代码中的几个关键点：</p>
<ul>
<li><code>os.path.join(folder_path, file_name)</code>：这个函数用于将文件夹路径和文件名合并成一个完整的文件路径。</li>
<li><code>&#39;w&#39;</code>：这是打开文件的模式，<code>&#39;w&#39;</code>代表写入（write）。如果文件已存在，这个模式会覆盖原有内容；如果文件不存在，将会创建一个新文件。</li>
<li><code>encoding=&#39;utf-8&#39;</code>：指定文件的编码格式。这里使用UTF-8，它支持中文字符，适用于多种语言环境。</li>
<li><code>with open(...) as file</code>：这个语句块确保文件在操作完成后会被正确关闭，即使在写入过程中发生异常也是如此。<br>如果<code>data_folder</code>文件夹不存在，你需要先创建它，可以使用<code>os.makedirs</code>函数：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 确定文件夹路径</span></span><br><span class="line">folder_path = <span class="string">&#x27;data_folder&#x27;</span></span><br><span class="line"><span class="comment"># 如果文件夹不存在，创建文件夹</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder_path):</span><br><span class="line">    os.makedirs(folder_path)</span><br><span class="line"><span class="comment"># 接下来按照上面的代码写入文件</span></span><br></pre></td></tr></table></figure>
确保在运行上述代码之前，你的脚本有正确的权限在指定位置创建文件夹和文件。如果在操作过程中遇到权限问题，你可能需要在命令行或文件管理器中检查和调整文件夹的权限设置。</li>
</ul>
<h3 id="enumerate-函数"><a href="#enumerate-函数" class="headerlink" title="enumerate 函数"></a>enumerate 函数</h3><p><strong>enumerate</strong> 函数是 Python 内置的一个函数，用于在迭代一个序列（如列表、元组或字符串）的同时，自动为每个元素分配一个索引。它返回一个枚举对象，该对象生成包含索引和值的元组。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>Python</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enumerate(sequence, start=0)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>sequence</code>: 要迭代的序列。</li>
<li><code>start</code>: 可选参数，指定索引的起始值，默认为 0。</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>enumerate 函数返回一个枚举对象，该对象是一个迭代器，每次生成一个包含索引和值的元组。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>Python</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fruits = [&quot;苹果&quot;, &quot;香蕉&quot;, &quot;橙子&quot;]</span><br><span class="line"></span><br><span class="line">for index, fruit in enumerate(fruits):</span><br><span class="line">    print(f&quot;索引: &#123;index&#125;, 水果: &#123;fruit&#125;&quot;)</span><br></pre></td></tr></table></figure>

<p>这将输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">索引: 0, 水果: 苹果</span><br><span class="line">索引: 1, 水果: 香蕉</span><br><span class="line">索引: 2, 水果: 橙子</span><br></pre></td></tr></table></figure>

<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>当需要同时访问序列的索引和值时，enumerate 函数非常有用。</li>
<li>可以用于创建编号列表或格式化输出，包含索引和对应值。</li>
<li>处理需要索引信息的序列操作，如根据索引修改元素、插入元素等。</li>
</ul>
<p><strong>总结</strong> enumerate 函数提供了一种方便的方式来在迭代序列时获取元素的索引和值，简化了代码并提高可读性。</p>
<h3 id="直接输入数组的方法"><a href="#直接输入数组的方法" class="headerlink" title="直接输入数组的方法"></a>直接输入数组的方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">list</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br></pre></td></tr></table></figure>

<h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入要输入的个数:&quot;</span>))</span><br><span class="line">p_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a):</span><br><span class="line">    b=<span class="built_in">input</span>(<span class="string">f&quot;输入第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>个值&quot;</span>)</span><br><span class="line">    p_list.append(b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;列表的值是&quot;</span>+<span class="built_in">str</span>(p_list))</span><br><span class="line">c=[]</span><br><span class="line">k=<span class="number">0</span></span><br><span class="line">target=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入target的值&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">        m=<span class="built_in">int</span>(p_list[i])+<span class="built_in">int</span>(p_list[j])</span><br><span class="line">        c.append(m)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(c))</span><br><span class="line">        k=k+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">             <span class="keyword">if</span> c[l]==target:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[&quot;</span>,p_list[i],<span class="string">&quot;,&quot;</span>,p_list[j],<span class="string">&quot;]&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>a&#x3D;input(“”)<strong>这里的a是str，不是整数，所以不能用</strong>for i in range(a)</strong></p>
<p>要将a进行转换，即把a转换成int类型,<strong>a&#x3D;int(input(“”))</strong></p>
<p>print(p_list)也不行，列表<code>p_list</code>不能直接与字符串拼接，所以我们需要将列表转换为字符串</p>
<p>print(str(p_list))\</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">two_sum</span>(<span class="params">nums, target</span>):</span><br><span class="line">    <span class="comment"># 创建一个哈希表来存储数值和它们的索引</span></span><br><span class="line">    num_to_index = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">        <span class="comment"># 计算目标值和当前数值的差值</span></span><br><span class="line">        complement = target - num</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果差值在哈希表中，返回当前数值和差值的索引</span></span><br><span class="line">        <span class="keyword">if</span> complement <span class="keyword">in</span> num_to_index:</span><br><span class="line">            <span class="keyword">return</span> [num_to_index[complement], i]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果差值不在哈希表中，将当前数值和索引存入哈希表</span></span><br><span class="line">        num_to_index[num] = i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]</span><br><span class="line">target = <span class="number">9</span></span><br><span class="line">result = two_sum(nums, target)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: [0, 1]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从用户那里获取输入</span></span><br><span class="line">input_list=<span class="built_in">input</span>(<span class="string">&quot;输入整数列表，以逗号分隔:&quot;</span>)</span><br><span class="line">target=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入目标值:&quot;</span>))</span><br><span class="line"><span class="comment">#将输入的字符串转化为列表</span></span><br><span class="line">num=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,input_list.split(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line"><span class="comment">#找到和为目标值的两个整数的索引</span></span><br><span class="line">result=two_sum(num,target)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h3><p>这段代码的目的是计算两个逆序链表表示的数字的和，并将结果表示为链表。逆序链表表示的是数字的每一位从低到高排列的形式，比如链表 <code>3 -&gt; 4 -&gt; 2</code> 表示数字 <code>243</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.val = val    <span class="comment"># 节点的值</span></span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="built_in">next</span>  <span class="comment"># 指向下一个节点的指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_linked_list</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将列表转换为链表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        nums: 一个包含数字的列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        表示该列表的链表头节点</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    head = <span class="literal">None</span>  <span class="comment"># 链表的头节点</span></span><br><span class="line">    tail = <span class="literal">None</span>  <span class="comment"># 链表的尾节点</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums[::-<span class="number">1</span>]:  <span class="comment"># 逆序遍历列表</span></span><br><span class="line">        new_node = ListNode(num)  <span class="comment"># 创建新的节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            head = tail = new_node  <span class="comment"># 如果链表为空，则头尾都指向新节点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail.<span class="built_in">next</span> = new_node  <span class="comment"># 将新节点添加到链表尾部</span></span><br><span class="line">            tail = new_node  <span class="comment"># 更新尾节点为新节点</span></span><br><span class="line">    <span class="keyword">return</span> head  <span class="comment"># 返回链表的头节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addTwoNumbers</span>(<span class="params">l1, l2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将两个逆序链表相加并返回结果链表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        l1: 第一个链表</span></span><br><span class="line"><span class="string">        l2: 第二个链表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        表示相加结果的链表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    res = ListNode(<span class="number">0</span>)  <span class="comment"># 创建一个哨兵节点，作为结果链表的头节点</span></span><br><span class="line">    cur = res  <span class="comment"># 当前节点指针</span></span><br><span class="line">    p1 = l1    <span class="comment"># 指向第一个链表的指针</span></span><br><span class="line">    p2 = l2    <span class="comment"># 指向第二个链表的指针</span></span><br><span class="line">    carry = <span class="number">0</span>  <span class="comment"># 进位值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> p1 <span class="keyword">or</span> p2 <span class="keyword">or</span> carry:</span><br><span class="line">        val1 = p1.val <span class="keyword">if</span> p1 <span class="keyword">else</span> <span class="number">0</span>  <span class="comment"># 如果第一个链表为空，则值为0</span></span><br><span class="line">        val2 = p2.val <span class="keyword">if</span> p2 <span class="keyword">else</span> <span class="number">0</span>  <span class="comment"># 如果第二个链表为空，则值为0</span></span><br><span class="line">        <span class="built_in">sum</span> = val1 + val2 + carry   <span class="comment"># 计算当前位的和</span></span><br><span class="line"></span><br><span class="line">        carry = <span class="built_in">sum</span> // <span class="number">10</span>  <span class="comment"># 计算进位</span></span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> % <span class="number">10</span>     <span class="comment"># 当前位的实际值</span></span><br><span class="line"></span><br><span class="line">        newNode = ListNode(<span class="built_in">sum</span>)  <span class="comment"># 创建一个新的节点</span></span><br><span class="line">        cur.<span class="built_in">next</span> = newNode  <span class="comment"># 将新节点添加到结果链表</span></span><br><span class="line">        cur = cur.<span class="built_in">next</span>  <span class="comment"># 更新当前节点为新节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p1:</span><br><span class="line">            p1 = p1.<span class="built_in">next</span>  <span class="comment"># 移动第一个链表指针</span></span><br><span class="line">        <span class="keyword">if</span> p2:</span><br><span class="line">            p2 = p2.<span class="built_in">next</span>  <span class="comment"># 移动第二个链表指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理尾部的进位</span></span><br><span class="line">    <span class="keyword">if</span> carry:</span><br><span class="line">        newNode = ListNode(carry)  <span class="comment"># 创建一个新的节点存储进位值</span></span><br><span class="line">        cur.<span class="built_in">next</span> = newNode  <span class="comment"># 将新节点添加到结果链表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="built_in">next</span>  <span class="comment"># 返回结果链表的头节点（去掉哨兵节点）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入</span></span><br><span class="line">num1_str = <span class="built_in">input</span>(<span class="string">&quot;请输入第一个数字：&quot;</span>)</span><br><span class="line">num2_str = <span class="built_in">input</span>(<span class="string">&quot;请输入第二个数字：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为数字列表</span></span><br><span class="line">num1_list = [<span class="built_in">int</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> num1_str]  <span class="comment"># 将第一个输入字符串转换为数字列表</span></span><br><span class="line">num2_list = [<span class="built_in">int</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> num2_str]  <span class="comment"># 将第二个输入字符串转换为数字列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数字列表转换为链表</span></span><br><span class="line">l1 = create_linked_list(num1_list)  <span class="comment"># 创建第一个链表</span></span><br><span class="line">l2 = create_linked_list(num2_list)  <span class="comment"># 创建第二个链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算两个链表的和</span></span><br><span class="line">result = addTwoNumbers(l1, l2)  <span class="comment"># 得到结果链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将结果链表转换为列表并打印</span></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">while</span> result:</span><br><span class="line">    output.append(result.val)  <span class="comment"># 将结果链表的每个节点值添加到列表中</span></span><br><span class="line">    result = result.<span class="built_in">next</span>  <span class="comment"># 移动到下一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(output)  <span class="comment"># 打印结果列表</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>链表节点类 <code>ListNode</code></strong>:</p>
<ul>
<li>定义链表节点的数据结构，包括节点值 <code>val</code> 和指向下一个节点的指针 <code>next</code>。</li>
</ul>
</li>
<li><p><strong>函数 <code>create_linked_list</code></strong>:</p>
<ul>
<li>输入：数字列表（如 <code>[2, 4, 3]</code>）。</li>
<li>输出：表示该列表的链表（链表表示的数字是 <code>342</code>，因为链表是逆序的）。</li>
<li>实现：逆序遍历列表，逐个创建节点，并将节点连接起来。</li>
</ul>
</li>
<li><p><strong>函数 <code>addTwoNumbers</code></strong>:</p>
<ul>
<li>输入：两个链表（分别表示两个逆序的数字）。</li>
<li>输出：表示两个数字和的链表。</li>
<li>实现：逐位相加两个链表的节点值，处理进位，并构建结果链表。</li>
</ul>
</li>
<li><p><strong>用户输入与处理</strong>:</p>
<ul>
<li>从用户获取两个数字的字符串输入。</li>
<li>将这些字符串转换为数字列表。</li>
<li>将数字列表转换为链表。</li>
<li>调用 <code>addTwoNumbers</code> 函数计算结果链表，并将其转换为列表形式打印出来。</li>
</ul>
</li>
</ol>
<h3 id="无重复字符的最长长度"><a href="#无重复字符的最长长度" class="headerlink" title="无重复字符的最长长度"></a>无重复字符的最长长度</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lengthOfLongestSubstring</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  查找一个字符串中没有重复字符的最长子串的长度。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  参数:</span></span><br><span class="line"><span class="string">    s: 输入的字符串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  返回:</span></span><br><span class="line"><span class="string">    没有重复字符的最长子串的长度。</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  used = &#123;&#125;  <span class="comment"># 跟踪每个字符的最后出现索引</span></span><br><span class="line">  max_length = <span class="number">0</span></span><br><span class="line">  start = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">    <span class="comment"># 如果字符已经在 used 中，并且在当前窗口内</span></span><br><span class="line">    <span class="built_in">print</span>(i,char)</span><br><span class="line">    <span class="keyword">if</span> char <span class="keyword">in</span> used <span class="keyword">and</span> used[char] &gt;= start:</span><br><span class="line">      <span class="comment"># 将起始索引移动到字符最后出现位置的下一个位置</span></span><br><span class="line">      start = used[char] + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="comment"># 如果当前窗口更长，则更新最大长度</span></span><br><span class="line">      max_length = <span class="built_in">max</span>(max_length, i - start + <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 更新字符的最后出现索引</span></span><br><span class="line">    used[char] = i</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max_length</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line">s=<span class="built_in">input</span>(<span class="string">&quot;请输入字符串:&quot;</span>)</span><br><span class="line">result = lengthOfLongestSubstring(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(result):</span><br><span class="line">    <span class="built_in">print</span>(s[i],end=<span class="string">&#x27;&#x27;</span>)  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="寻找两个正序数组中的中位数"><a href="#寻找两个正序数组中的中位数" class="headerlink" title="寻找两个正序数组中的中位数"></a>寻找两个正序数组中的中位数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findMedianSortedArrays</span>(<span class="params">nums1, nums2</span>):</span><br><span class="line">    <span class="comment"># 确保 nums1 是较短的数组</span></span><br><span class="line">    <span class="comment"># 如果 nums1 长度大于 nums2，则交换它们，这样可以减少二分查找的复杂度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums1) &gt; <span class="built_in">len</span>(nums2):</span><br><span class="line">        nums1, nums2 = nums2, nums1</span><br><span class="line"></span><br><span class="line">    m, n = <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)  <span class="comment"># 获取两个数组的长度</span></span><br><span class="line">    imin, imax = <span class="number">0</span>, m  <span class="comment"># 初始化 nums1 的二分查找范围</span></span><br><span class="line">    half_len = (m + n + <span class="number">1</span>) // <span class="number">2</span>  <span class="comment"># 合并数组的左半部分长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> imin &lt;= imax:</span><br><span class="line">        i = (imin + imax) // <span class="number">2</span>  <span class="comment"># nums1 中的分割点</span></span><br><span class="line">        j = half_len - i  <span class="comment"># nums2 中的分割点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调整分割点</span></span><br><span class="line">        <span class="comment"># nums1[i] 是 nums1 的右侧最小值，nums2[j-1] 是 nums2 的左侧最大值</span></span><br><span class="line">        <span class="comment"># 如果 nums1[i] 太小，说明 i 太小，需要增大 i</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; m <span class="keyword">and</span> nums2[j - <span class="number">1</span>] &gt; nums1[i]:</span><br><span class="line">            imin = i + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果 nums1[i-1] 太大，说明 i 太大，需要减小 i</span></span><br><span class="line">        <span class="keyword">elif</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums1[i - <span class="number">1</span>] &gt; nums2[j]:</span><br><span class="line">            imax = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 找到合适的分割点</span></span><br><span class="line">            <span class="comment"># 计算左半部分的最大值</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                max_of_left = nums2[j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> j == <span class="number">0</span>:</span><br><span class="line">                max_of_left = nums1[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                max_of_left = <span class="built_in">max</span>(nums1[i - <span class="number">1</span>], nums2[j - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果总长度是奇数，中位数是左半部分的最大值</span></span><br><span class="line">            <span class="keyword">if</span> (m + n) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> max_of_left</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算右半部分的最小值</span></span><br><span class="line">            <span class="keyword">if</span> i == m:</span><br><span class="line">                min_of_right = nums2[j]</span><br><span class="line">            <span class="keyword">elif</span> j == n:</span><br><span class="line">                min_of_right = nums1[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                min_of_right = <span class="built_in">min</span>(nums1[i], nums2[j])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果总长度是偶数，中位数是左半部分最大值和右半部分最小值的平均值</span></span><br><span class="line">            <span class="keyword">return</span> (max_of_left + min_of_right) / <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(findMedianSortedArrays(nums1, nums2))  <span class="comment"># 输出: 2.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_shu</span>(<span class="params">num1, num2</span>):</span><br><span class="line">    <span class="comment"># 合并两个数组</span></span><br><span class="line">    merged = num1 + num2</span><br><span class="line">    <span class="keyword">return</span> merged</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">paixu</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="comment"># 使用内置排序函数简化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">arr, target</span>):</span><br><span class="line">    <span class="comment"># 二分查找算法</span></span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid  <span class="comment"># 返回找到的索引</span></span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 如果未找到，返回 -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请输入第一个数组的值（用空格分隔）：&quot;</span>)</span><br><span class="line">num1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请输入第二个数组的值（用空格分隔）：&quot;</span>)</span><br><span class="line">num2 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并和排序</span></span><br><span class="line">merged = merge_shu(num1, num2)</span><br><span class="line">sorted_merged = paixu(merged)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;合并并排序后的数组：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(sorted_merged)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请输入你要查找的值:&quot;</span>)</span><br><span class="line">k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找值的索引</span></span><br><span class="line">index = binary_search(sorted_merged, k)</span><br><span class="line"><span class="keyword">if</span> index != -<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;值 <span class="subst">&#123;k&#125;</span> 的索引是: <span class="subst">&#123;index&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;值 <span class="subst">&#123;k&#125;</span> 不在数组中&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h3><p>当然，我来详细解释一下这个求解字符串中最长回文子串的代码，并附上注释和思路。下面是带有注释的代码版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">longest_palindromic_substring</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</span></span><br><span class="line"><span class="string">    示例 1：</span></span><br><span class="line"><span class="string">    输入: &quot;babad&quot;</span></span><br><span class="line"><span class="string">    输出: &quot;bab&quot;</span></span><br><span class="line"><span class="string">    注意: &quot;aba&quot; 也是一个有效答案。</span></span><br><span class="line"><span class="string">    示例 2：</span></span><br><span class="line"><span class="string">    输入: &quot;cbbd&quot;</span></span><br><span class="line"><span class="string">    输出: &quot;bb&quot;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">expand_around_center</span>(<span class="params">left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从给定的中心位置向两边扩展，找到最长的回文子串。</span></span><br><span class="line"><span class="string">        :param left: 回文中心的左边索引</span></span><br><span class="line"><span class="string">        :param right: 回文中心的右边索引</span></span><br><span class="line"><span class="string">        :return: 找到的最长回文子串</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 当左右两边的字符相等且在字符串范围内时，不断扩展</span></span><br><span class="line">        <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 返回扩展后的回文子串</span></span><br><span class="line">        <span class="keyword">return</span> s[left + <span class="number">1</span>:right]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 存储最长回文子串</span></span><br><span class="line">    longest = <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历字符串中的每一个字符</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="comment"># 查找以当前字符为中心的回文子串（奇数长度）</span></span><br><span class="line">        odd_palindrome = expand_around_center(i, i)</span><br><span class="line">        <span class="comment"># 如果找到的回文子串比当前记录的最长回文子串还长，则更新最长回文子串</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(odd_palindrome) &gt; <span class="built_in">len</span>(longest):</span><br><span class="line">            longest = odd_palindrome</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 查找以当前字符和下一个字符之间为中心的回文子串（偶数长度）</span></span><br><span class="line">        even_palindrome = expand_around_center(i, i + <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 如果找到的回文子串比当前记录的最长回文子串还长，则更新最长回文子串</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(even_palindrome) &gt; <span class="built_in">len</span>(longest):</span><br><span class="line">            longest = even_palindrome</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> longest</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    strs = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串: &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最长回文字串: &quot;</span> + longest_palindromic_substring(strs))</span><br></pre></td></tr></table></figure>

<p>思路</p>
<ol>
<li><p><strong>中心扩展法</strong>：</p>
<ul>
<li>回文子串的特点是从中心向两边对称。通过从每个字符（或者字符之间）作为中心开始扩展，我们可以找到所有可能的回文子串。</li>
<li>我们有两种情况需要处理：<ol>
<li><strong>奇数长度的回文子串</strong>：以单个字符为中心。</li>
<li><strong>偶数长度的回文子串</strong>：以两个相邻字符之间的位置为中心。</li>
</ol>
</li>
</ul>
</li>
<li><p>**函数 <code>expand_around_center</code>**：</p>
<ul>
<li>这个辅助函数从给定的中心位置开始，向左右扩展，直到左右字符不再相等或者越过字符串的边界。</li>
<li>最终返回的是当前中心位置的最长回文子串。</li>
</ul>
</li>
<li><p><strong>主函数逻辑</strong>：</p>
<ul>
<li>遍历字符串的每个字符，分别检查以该字符为中心的奇数长度回文子串和以该字符和下一个字符之间的位置为中心的偶数长度回文子串。</li>
<li>更新记录的最长回文子串。</li>
</ul>
</li>
</ol>
<p>运行流程</p>
<ul>
<li>用户输入字符串后，程序会调用 <code>longest_palindromic_substring</code> 函数，利用中心扩展法找到最长的回文子串，并输出结果。</li>
</ul>
<h3 id="字符串转换整数"><a href="#字符串转换整数" class="headerlink" title="字符串转换整数"></a>字符串转换整数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myAtoi</span>(<span class="params">s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="comment"># Step 1: Trim leading spaces</span></span><br><span class="line">    s = s.lstrip()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 2: Determine the sign</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    sign = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> s[i] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        sign = -<span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> s[i] == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 3: Convert the string to an integer</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[i].isdigit():</span><br><span class="line">        result = result * <span class="number">10</span> + <span class="built_in">int</span>(s[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    result *= sign</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Step 4: Handle the 32-bit integer range</span></span><br><span class="line">    INT_MIN, INT_MAX = -<span class="number">2</span>**<span class="number">31</span>, <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> result &lt; INT_MIN:</span><br><span class="line">        <span class="keyword">return</span> INT_MIN</span><br><span class="line">    <span class="keyword">if</span> result &gt; INT_MAX:</span><br><span class="line">        <span class="keyword">return</span> INT_MAX</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>函数目标</p>
<p><code>myAtoi</code> 函数的目的是将字符串 <code>s</code> 转换为一个 32 位有符号整数。该函数需要处理字符串中的空格、符号、数字以及可能的超出范围的情况。</p>
<ol>
<li>去除空格</li>
</ol>
<p><strong>目的</strong>：移除字符串开头的空白字符，以便从有效内容开始处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = s.lstrip()</span><br></pre></td></tr></table></figure>

<p><strong>解释</strong>：</p>
<ul>
<li><code>s.lstrip()</code> 会去掉字符串 <code>s</code> 开头的所有空白字符（包括空格、制表符等）。</li>
<li>如果处理后的字符串为空（即原始字符串只有空白字符），直接返回 0，因为在这种情况下没有有效的数字。</li>
</ul>
<ol start="2">
<li>处理符号</li>
</ol>
<p><strong>目的</strong>：确定字符串中的符号（<code>+</code> 或 <code>-</code>），以决定转换结果是正数还是负数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">sign = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> s[i] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">    sign = -<span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> s[i] == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>解释</strong>：</p>
<ul>
<li><code>i</code> 是一个索引，用来跟踪当前处理的字符位置。</li>
<li><code>sign</code> 变量用来保存结果的符号。默认设置为 1，表示正数。</li>
<li>如果字符串的第一个非空白字符是 <code>&#39;-&#39;</code>，则设置 <code>sign</code> 为 -1，并将 <code>i</code> 移到下一个字符。这样可以处理负数。</li>
<li>如果字符是 <code>&#39;+&#39;</code>，则只需将 <code>i</code> 移到下一个字符，继续处理其后的数字（<code>&#39;+&#39;</code> 不改变结果的符号）。</li>
</ul>
<ol start="3">
<li>转换字符串为整数</li>
</ol>
<p><strong>目的</strong>：将剩余的数字字符转换为整数值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> s[i].isdigit():</span><br><span class="line">    result = result * <span class="number">10</span> + <span class="built_in">int</span>(s[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>解释</strong>：</p>
<ul>
<li>初始化 <code>result</code> 为 0。这个变量用来保存最终的整数结果。</li>
<li>使用 <code>while</code> 循环遍历剩余的字符。只要字符是数字，就继续处理。</li>
<li><code>result = result * 10 + int(s[i])</code> 这行代码将当前数字添加到结果中。每次循环时，先将 <code>result</code> 乘以 10（相当于在十进制系统中移动到下一个位置），然后加上当前数字。</li>
<li><code>i</code> 每次循环后都增加 1，以检查下一个字符。</li>
</ul>
<ol start="4">
<li>处理超出范围的情况</li>
</ol>
<p><strong>目的</strong>：确保结果在 32 位有符号整数的范围内。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result *= sign</span><br><span class="line">INT_MIN, INT_MAX = -<span class="number">2</span>**<span class="number">31</span>, <span class="number">2</span>**<span class="number">31</span> - <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> result &lt; INT_MIN:</span><br><span class="line">    <span class="keyword">return</span> INT_MIN</span><br><span class="line"><span class="keyword">if</span> result &gt; INT_MAX:</span><br><span class="line">    <span class="keyword">return</span> INT_MAX</span><br></pre></td></tr></table></figure>

<ul>
<li>乘以 <code>sign</code> 以得到最终的结果（考虑负号的影响）。</li>
<li><code>INT_MIN</code> 和 <code>INT_MAX</code> 分别表示 32 位有符号整数的最小值和最大值。</li>
<li>如果 <code>result</code> 小于 <code>INT_MIN</code>，则返回 <code>INT_MIN</code>。</li>
<li>如果 <code>result</code> 大于 <code>INT_MAX</code>，则返回 <code>INT_MAX</code>。</li>
<li>这样可以确保结果不会超出 32 位整数的范围。</li>
</ul>
<p>总结</p>
<ul>
<li><strong>去除空格</strong>：处理字符串中的无效前导空格。</li>
<li><strong>处理符号</strong>：确定结果的正负。</li>
<li><strong>转换数字</strong>：将字符转换为整数。</li>
<li><strong>处理范围</strong>：确保结果在合法范围内。</li>
</ul>
<p>这个实现可以正确地将各种输入字符串转换为 32 位有符号整数，同时处理了常见的边界情况。</p>
<h3 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">longest_common_prefix</span>(<span class="params">strs</span>):</span><br><span class="line">    <span class="comment"># 如果字符串列表为空，则返回空字符串</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 选择第一个字符串作为当前的前缀</span></span><br><span class="line">    prefix = strs[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历剩下的字符串</span></span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> strs[<span class="number">1</span>:]:</span><br><span class="line">        <span class="comment"># 当当前前缀不是当前字符串的开始部分时，缩短前缀</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> string.startswith(prefix):</span><br><span class="line">            <span class="comment"># 缩短前缀，去掉最后一个字符</span></span><br><span class="line">            prefix = prefix[:-<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 如果前缀缩短到空字符串，则返回空字符串</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> prefix:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回找到的最长公共前缀</span></span><br><span class="line">    <span class="keyword">return</span> prefix</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_input</span>():</span><br><span class="line">    <span class="comment"># 获取用户输入的字符串个数 n</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入字符串个数:&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化一个空列表用于存储用户输入的字符串</span></span><br><span class="line">    strings = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 循环获取 n 个字符串</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 提示用户输入第 i+1 个字符串</span></span><br><span class="line">        s = <span class="built_in">input</span>(<span class="string">f&quot;请输入第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>个字符串:&quot;</span>)</span><br><span class="line">        <span class="comment"># 将输入的字符串添加到列表中</span></span><br><span class="line">        strings.append(s)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回包含所有字符串的列表</span></span><br><span class="line">    <span class="keyword">return</span> strings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 get_input 函数获取用户输入的字符串列表</span></span><br><span class="line">strings = get_input()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 longest_common_prefix 函数计算最长公共前缀，并打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最长公共前缀是:&quot;</span>, longest_common_prefix(strings))</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong><code>longest_common_prefix</code> 函数</strong>：</p>
<ul>
<li><strong>参数</strong>：<code>strs</code> 是一个字符串列表。</li>
<li><strong>功能</strong>：找到列表中所有字符串的最长公共前缀。</li>
<li><strong>步骤</strong>：<ul>
<li>首先，检查列表是否为空。如果为空，直接返回空字符串。</li>
<li>将第一个字符串作为初始前缀。</li>
<li>遍历列表中的其他字符串，检查它们是否以当前前缀开头。如果不是，则缩短前缀，直到找到一个匹配的前缀或前缀为空。</li>
<li>返回最终找到的前缀。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>get_input</code> 函数</strong>：</p>
<ul>
<li><strong>功能</strong>：从用户那里获取输入的字符串。</li>
<li><strong>步骤</strong>：<ul>
<li>提示用户输入字符串的数量。</li>
<li>初始化一个空列表 <code>strings</code> 来存储输入的字符串。</li>
<li>循环 <code>n</code> 次，提示用户输入每个字符串，并将其添加到列表中。</li>
<li>返回包含所有用户输入字符串的列表。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>主程序</strong>：</p>
<ul>
<li>调用 <code>get_input</code> 函数获取用户输入的字符串列表。</li>
<li>调用 <code>longest_common_prefix</code> 函数计算最长公共前缀。</li>
<li>打印结果，显示最长公共前缀。</li>
</ul>
</li>
</ol>
<h3 id="图片转换16进制"><a href="#图片转换16进制" class="headerlink" title="图片转换16进制"></a>图片转换16进制</h3><p>如果你想将图片文件转换为十六进制数据并保存到文本文件中，可以按照以下步骤操作：</p>
<ol>
<li><strong>读取图片文件</strong>：首先，以二进制模式读取图片文件的内容。</li>
<li><strong>转换为十六进制</strong>：将二进制数据转换为十六进制格式。</li>
<li><strong>保存到文本文件</strong>：将十六进制数据写入到文本文件中。</li>
</ol>
<p>下面是一个示例代码，演示如何将图片转换为十六进制格式并保存到文本文件中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">image_to_hex_file</span>(<span class="params">image_path, hex_file_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 以二进制模式读取图片文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(image_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> img_file:</span><br><span class="line">            binary_data = img_file.read()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将二进制数据转换为十六进制字符串</span></span><br><span class="line">        hex_data = binary_data.<span class="built_in">hex</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将十六进制字符串写入到文本文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(hex_file_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> hex_file:</span><br><span class="line">            hex_file.write(hex_data)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;十六进制数据已保存到：<span class="subst">&#123;hex_file_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件 <span class="subst">&#123;image_path&#125;</span> 未找到。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发生错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    image_path = <span class="string">&quot;C:\\Users\\25373\\Downloads\\image.jpg&quot;</span>  <span class="comment"># 替换为你的图片文件路径</span></span><br><span class="line">    hex_file_path = <span class="string">&quot;C:\\Users\\25373\\Downloads\\file.txt&quot;</span>  <span class="comment"># 替换为保存十六进制数据的文件路径</span></span><br><span class="line">    image_to_hex_file(image_path, hex_file_path)</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>读取图片文件</strong>：</p>
<ul>
<li><code>with open(image_path, &quot;rb&quot;) as img_file: binary_data = img_file.read()</code>：以二进制模式读取图片文件的内容。</li>
</ul>
</li>
<li><p><strong>转换为十六进制</strong>：</p>
<ul>
<li><code>binary_data.hex()</code>：将读取的二进制数据转换为十六进制字符串。</li>
</ul>
</li>
<li><p><strong>保存到文本文件</strong>：</p>
<ul>
<li><code>with open(hex_file_path, &quot;w&quot;) as hex_file: hex_file.write(hex_data)</code>：将十六进制字符串写入到指定的文本文件中。</li>
</ul>
</li>
<li><p><strong>错误处理</strong>：</p>
<ul>
<li>捕获 <code>FileNotFoundError</code> 以处理图片文件未找到的情况，并捕获其他异常。</li>
</ul>
</li>
</ol>
<ul>
<li>将 <code>image_path</code> 替换为你的图片文件路径。</li>
<li>将 <code>hex_file_path</code> 替换为你希望保存十六进制数据的文本文件路径。</li>
<li>运行脚本后，图片文件将被转换为十六进制数据并保存到指定的文本文件中。</li>
</ul>
<h3 id="16进制转换图片"><a href="#16进制转换图片" class="headerlink" title="16进制转换图片"></a>16进制转换图片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_file_to_jpg</span>(<span class="params">hex_file_path, output_jpg_path</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 从文件中读取十六进制数据</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(hex_file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> hex_file:</span><br><span class="line">            hex_data = hex_file.read()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 去除任何非十六进制字符（包括空格、换行符等）</span></span><br><span class="line">        hex_data = re.sub(<span class="string">r&#x27;[^0-9A-Fa-f]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, hex_data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将十六进制字符串转换为字节数据</span></span><br><span class="line">        binary_data = <span class="built_in">bytes</span>.fromhex(hex_data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将字节数据写入到 JPG 文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_jpg_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> jpg_file:</span><br><span class="line">            jpg_file.write(binary_data)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;JPG 文件已生成：<span class="subst">&#123;output_jpg_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;转换过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件 <span class="subst">&#123;hex_file_path&#125;</span> 未找到。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发生错误：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    hex_file_path = <span class="string">&quot;C:\\Users\\25373\\Downloads\\file.txt&quot;</span>  <span class="comment"># 替换为你的十六进制数据文件路径</span></span><br><span class="line">    output_jpg_path = <span class="string">&quot;output.jpg&quot;</span></span><br><span class="line">    hex_file_to_jpg(hex_file_path, output_jpg_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠标拖尾效果</title>
    <url>/2024/08/02/%E6%95%B0%E7%8B%AC/</url>
    <content><![CDATA[<p>作为一个数独高手，用python做一个数独项目挺有意思的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Pygame</span></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置屏幕尺寸</span></span><br><span class="line">WIDTH, HEIGHT = <span class="number">720</span>, <span class="number">600</span></span><br><span class="line">GRID_SIZE = <span class="number">9</span></span><br><span class="line">CELL_SIZE = (WIDTH - <span class="number">160</span>) // GRID_SIZE  <span class="comment"># 减去颜色选择区域的宽度</span></span><br><span class="line">FONT_SIZE = CELL_SIZE // <span class="number">2</span></span><br><span class="line">BUTTON_WIDTH, BUTTON_HEIGHT = <span class="number">140</span>, <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色</span></span><br><span class="line">WHITE = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">COLORS = [</span><br><span class="line">    (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>),    <span class="comment"># Red</span></span><br><span class="line">    (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>),    <span class="comment"># Green</span></span><br><span class="line">    (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>),    <span class="comment"># Blue</span></span><br><span class="line">    (<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>),  <span class="comment"># Yellow</span></span><br><span class="line">    (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>),  <span class="comment"># Cyan</span></span><br><span class="line">    (<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>),  <span class="comment"># Magenta</span></span><br><span class="line">    (<span class="number">192</span>, <span class="number">192</span>, <span class="number">192</span>) <span class="comment"># Gray</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建屏幕</span></span><br><span class="line">screen = pygame.display.set_mode((WIDTH, HEIGHT))</span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;高难度数独&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体</span></span><br><span class="line">font_path = <span class="string">&quot;数独/image/AaZhuNiWoMingMeiXiangChunTian-2.ttf&quot;</span></span><br><span class="line">font = pygame.font.Font(font_path, FONT_SIZE)</span><br><span class="line">large_font = pygame.font.Font(font_path, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化游戏板</span></span><br><span class="line">board = np.zeros((GRID_SIZE, GRID_SIZE), dtype=<span class="built_in">int</span>)</span><br><span class="line">fixed_numbers = np.zeros((GRID_SIZE, GRID_SIZE), dtype=<span class="built_in">bool</span>)  <span class="comment"># 记录固定数字的位置</span></span><br><span class="line">cell_colors = np.zeros((GRID_SIZE, GRID_SIZE), dtype=<span class="built_in">object</span>)  <span class="comment"># 使用 np.zeros 创建对象数组</span></span><br><span class="line">selected_cell = <span class="literal">None</span></span><br><span class="line">selected_color = BLACK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量控制提示消息</span></span><br><span class="line">message = <span class="string">&quot;&quot;</span></span><br><span class="line">message_color = BLACK</span><br><span class="line">message_display_time = <span class="number">0</span>  <span class="comment"># 记录消息显示时间</span></span><br><span class="line">MESSAGE_DURATION = <span class="number">2</span>  <span class="comment"># 消息显示持续时间，单位为秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 cell_colors 为 BLACK</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">        cell_colors[i][j] = BLACK</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_grid</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制数独网格和初始数字&quot;&quot;&quot;</span></span><br><span class="line">    screen.fill(WHITE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制数独网格</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, WIDTH - <span class="number">160</span>, CELL_SIZE):</span><br><span class="line">        pygame.draw.line(screen, BLACK, (x, <span class="number">0</span>), (x, HEIGHT - <span class="number">60</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, HEIGHT - <span class="number">60</span>, CELL_SIZE):</span><br><span class="line">        pygame.draw.line(screen, BLACK, (<span class="number">0</span>, y), (WIDTH - <span class="number">160</span>, y), <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制粗线以分隔 3x3 区域</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, WIDTH - <span class="number">160</span>, <span class="number">3</span> * CELL_SIZE):</span><br><span class="line">        pygame.draw.line(screen, BLACK, (x, <span class="number">0</span>), (x, HEIGHT - <span class="number">60</span>), <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, HEIGHT - <span class="number">60</span>, <span class="number">3</span> * CELL_SIZE):</span><br><span class="line">        pygame.draw.line(screen, BLACK, (<span class="number">0</span>, y), (WIDTH - <span class="number">160</span>, y), <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_numbers</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制数独数字&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">            num = board[i][j]</span><br><span class="line">            <span class="keyword">if</span> num != <span class="number">0</span>:</span><br><span class="line">                color = cell_colors[i][j]</span><br><span class="line">                text = font.render(<span class="built_in">str</span>(num), <span class="literal">True</span>, color)</span><br><span class="line">                text_rect = text.get_rect(center=(j * CELL_SIZE + CELL_SIZE // <span class="number">2</span>, i * CELL_SIZE + CELL_SIZE // <span class="number">2</span>))</span><br><span class="line">                screen.blit(text, text_rect)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_color_palette</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制颜色选择区域&quot;&quot;&quot;</span></span><br><span class="line">    color_width = <span class="number">160</span></span><br><span class="line">    color_height = (HEIGHT - BUTTON_HEIGHT) // (<span class="built_in">len</span>(COLORS) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i, color <span class="keyword">in</span> <span class="built_in">enumerate</span>(COLORS):</span><br><span class="line">        pygame.draw.rect(screen, color, (WIDTH - color_width, i * color_height, color_width, color_height))</span><br><span class="line">        pygame.draw.rect(screen, BLACK, (WIDTH - color_width, i * color_height, color_width, color_height), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_submit_button</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制提交按钮&quot;&quot;&quot;</span></span><br><span class="line">    button_x = WIDTH - <span class="number">160</span> + (<span class="number">160</span> - BUTTON_WIDTH) // <span class="number">2</span></span><br><span class="line">    button_y = HEIGHT - BUTTON_HEIGHT - <span class="number">20</span></span><br><span class="line">    pygame.draw.rect(screen, (<span class="number">0</span>, <span class="number">128</span>, <span class="number">0</span>), (button_x, button_y, BUTTON_WIDTH, BUTTON_HEIGHT))</span><br><span class="line">    pygame.draw.rect(screen, BLACK, (button_x, button_y, BUTTON_WIDTH, BUTTON_HEIGHT), <span class="number">2</span>)</span><br><span class="line">    text = large_font.render(<span class="string">&#x27;ENTER&#x27;</span>, <span class="literal">True</span>, WHITE)</span><br><span class="line">    text_rect = text.get_rect(center=(button_x + BUTTON_WIDTH // <span class="number">2</span>, button_y + BUTTON_HEIGHT // <span class="number">2</span>))</span><br><span class="line">    screen.blit(text, text_rect)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_message</span>(<span class="params">message, color</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制提示信息&quot;&quot;&quot;</span></span><br><span class="line">    text = large_font.render(message, <span class="literal">True</span>, color)</span><br><span class="line">    text_rect = text.get_rect(center=(WIDTH // <span class="number">2</span>, HEIGHT // <span class="number">2</span>))</span><br><span class="line">    screen.blit(text, text_rect)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_sudoku</span>(<span class="params">board</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查数独解的正确性&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid_group</span>(<span class="params">group</span>):</span><br><span class="line">        <span class="comment"># 只考虑不为零的数字</span></span><br><span class="line">        group = [num <span class="keyword">for</span> num <span class="keyword">in</span> group <span class="keyword">if</span> num != <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="built_in">set</span>(group)) == <span class="built_in">len</span>(group)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查行和列</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid_group(board[i, :]) <span class="keyword">or</span> <span class="keyword">not</span> is_valid_group(board[:, i]):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查 3x3 区域</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, GRID_SIZE, <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, GRID_SIZE, <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_valid_group(board[i:i + <span class="number">3</span>, j:j + <span class="number">3</span>].flatten()):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_sudoku</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成一个高难度的数独&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个数独解的空板</span></span><br><span class="line">    board = np.zeros((GRID_SIZE, GRID_SIZE), dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">board, row, col, num</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查数字是否有效&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 检查行</span></span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> board[row]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 检查列</span></span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> board[:, col]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 检查 3x3 区域</span></span><br><span class="line">        start_row, start_col = <span class="number">3</span> * (row // <span class="number">3</span>), <span class="number">3</span> * (col // <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> board[start_row:start_row + <span class="number">3</span>, start_col:start_col + <span class="number">3</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">board</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;解决数独&quot;&quot;&quot;</span></span><br><span class="line">        empty = np.argwhere(board == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(empty):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        row, col = empty[<span class="number">0</span>]</span><br><span class="line">        numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">        random.shuffle(numbers)</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">            <span class="keyword">if</span> is_valid(board, row, col, num):</span><br><span class="line">                board[row][col] = num</span><br><span class="line">                <span class="keyword">if</span> solve(board):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                board[row][col] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充数独板</span></span><br><span class="line">    solve(board)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机去掉一些数字以增加难度</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        row, col = random.randint(<span class="number">0</span>, <span class="number">8</span>), random.randint(<span class="number">0</span>, <span class="number">8</span>)</span><br><span class="line">        board[row][col] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标记固定数字的位置</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">            <span class="keyword">if</span> board[i][j] != <span class="number">0</span>:</span><br><span class="line">                fixed_numbers[i, j] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> board, selected_cell, selected_color, cell_colors, message, message_color, message_display_time</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成数独棋盘</span></span><br><span class="line">    board = generate_sudoku()</span><br><span class="line">    selected_cell = <span class="literal">None</span></span><br><span class="line">    selected_color = BLACK</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取按钮区域的坐标和尺寸</span></span><br><span class="line">    button_x = WIDTH - <span class="number">160</span> + (<span class="number">160</span> - BUTTON_WIDTH) // <span class="number">2</span></span><br><span class="line">    button_y = HEIGHT - BUTTON_HEIGHT - <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 游戏主循环</span></span><br><span class="line">    running = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> running:</span><br><span class="line">        current_time = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                running = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">                x, y = pygame.mouse.get_pos()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 检测是否点击了颜色选择区域</span></span><br><span class="line">                <span class="keyword">if</span> x &gt;= WIDTH - <span class="number">160</span>:</span><br><span class="line">                    color_index = y // ((HEIGHT - BUTTON_HEIGHT) // (<span class="built_in">len</span>(COLORS) + <span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">0</span> &lt;= color_index &lt; <span class="built_in">len</span>(COLORS):</span><br><span class="line">                        selected_color = COLORS[color_index]</span><br><span class="line">                <span class="comment"># 检测是否点击了数独网格</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    row, col = y // CELL_SIZE, x // CELL_SIZE</span><br><span class="line">                    <span class="keyword">if</span> row &lt; GRID_SIZE <span class="keyword">and</span> col &lt; GRID_SIZE:</span><br><span class="line">                        selected_cell = (row, col)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">                <span class="keyword">if</span> event.key == pygame.K_RETURN:</span><br><span class="line">                    <span class="comment"># 确认操作，按下 ENTER 键时检查数独的正确性</span></span><br><span class="line">                    <span class="keyword">if</span> is_valid_sudoku(board):</span><br><span class="line">                        message = <span class="string">&quot;成功！&quot;</span></span><br><span class="line">                        message_color = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)  <span class="comment"># 绿色</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        message = <span class="string">&quot;失败！&quot;</span></span><br><span class="line">                        message_color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 红色</span></span><br><span class="line">                    message_display_time = current_time</span><br><span class="line">                <span class="keyword">elif</span> event.key == pygame.K_ESCAPE:</span><br><span class="line">                    running = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">elif</span> selected_cell:</span><br><span class="line">                    row, col = selected_cell</span><br><span class="line">                    <span class="keyword">if</span> event.key == pygame.K_BACKSPACE:</span><br><span class="line">                        <span class="comment"># 删除数字</span></span><br><span class="line">                        board[row][col] = <span class="number">0</span></span><br><span class="line">                        cell_colors[row][col] = BLACK</span><br><span class="line">                    <span class="keyword">elif</span> <span class="number">0</span> &lt;= event.key - pygame.K_0 &lt;= <span class="number">9</span>:</span><br><span class="line">                        num = event.key - pygame.K_0</span><br><span class="line">                        <span class="keyword">if</span> board[row][col] == <span class="number">0</span>:  <span class="comment"># 只允许填入空单元格</span></span><br><span class="line">                            board[row][col] = num</span><br><span class="line">                            cell_colors[row][col] = selected_color  <span class="comment"># 设置单元格颜色</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清屏并绘制网格和数字</span></span><br><span class="line">        draw_grid()</span><br><span class="line">        draw_numbers()</span><br><span class="line">        draw_color_palette()</span><br><span class="line">        draw_submit_button()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制提示信息</span></span><br><span class="line">        <span class="keyword">if</span> message <span class="keyword">and</span> (current_time - message_display_time &lt; MESSAGE_DURATION):</span><br><span class="line">            draw_message(message, message_color)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 刷新屏幕</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line">    pygame.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>数独都有了，那么解决数独的代码也该有了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化pygame</span></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口设置</span></span><br><span class="line">WINDOW_SIZE = <span class="number">540</span></span><br><span class="line">GRID_SIZE = <span class="number">9</span></span><br><span class="line">CELL_SIZE = WINDOW_SIZE // GRID_SIZE</span><br><span class="line">WHITE = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">GRAY = (<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">BLUE = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建窗口</span></span><br><span class="line">window = pygame.display.set_mode((WINDOW_SIZE, WINDOW_SIZE))</span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;Sudoku Solver&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载字体</span></span><br><span class="line">font = pygame.font.Font(<span class="literal">None</span>, <span class="number">50</span>)</span><br><span class="line">input_font = pygame.font.Font(<span class="literal">None</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数独解决器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_sudoku</span>(<span class="params">board</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">board, row, col, num</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">            <span class="keyword">if</span> board[row][i] == num <span class="keyword">or</span> board[i][col] == num:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        start_row, start_col = <span class="number">3</span> * (row // <span class="number">3</span>), <span class="number">3</span> * (col // <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_row, start_row + <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start_col, start_col + <span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == num:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">board</span>):</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">                <span class="keyword">if</span> board[row][col] == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, GRID_SIZE + <span class="number">1</span>):</span><br><span class="line">                        <span class="keyword">if</span> is_valid(board, row, col, num):</span><br><span class="line">                            board[row][col] = num</span><br><span class="line">                            <span class="keyword">if</span> solve(board):</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                            board[row][col] = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> solve(board):</span><br><span class="line">        <span class="keyword">return</span> board</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制网格和数字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_grid</span>(<span class="params">board, input_text=<span class="literal">None</span></span>):</span><br><span class="line">    window.fill(WHITE)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE + <span class="number">1</span>):</span><br><span class="line">        pygame.draw.line(window, BLACK, (<span class="number">0</span>, i * CELL_SIZE), (WINDOW_SIZE, i * CELL_SIZE), <span class="number">2</span>)</span><br><span class="line">        pygame.draw.line(window, BLACK, (i * CELL_SIZE, <span class="number">0</span>), (i * CELL_SIZE, WINDOW_SIZE), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(GRID_SIZE):</span><br><span class="line">            num = board[row][col]</span><br><span class="line">            <span class="keyword">if</span> num != <span class="number">0</span>:</span><br><span class="line">                text = font.render(<span class="built_in">str</span>(num), <span class="literal">True</span>, BLACK)</span><br><span class="line">                window.blit(text, (col * CELL_SIZE + CELL_SIZE // <span class="number">4</span>, row * CELL_SIZE + CELL_SIZE // <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> input_text:</span><br><span class="line">        <span class="comment"># 绘制输入文本框</span></span><br><span class="line">        pygame.draw.rect(window, BLUE, (<span class="number">0</span>, WINDOW_SIZE - <span class="number">50</span>, WINDOW_SIZE, <span class="number">50</span>))</span><br><span class="line">        text_surface = input_font.render(input_text, <span class="literal">True</span>, WHITE)</span><br><span class="line">        window.blit(text_surface, (<span class="number">10</span>, WINDOW_SIZE - <span class="number">40</span>))</span><br><span class="line">    </span><br><span class="line">    pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    board = np.zeros((GRID_SIZE, GRID_SIZE), dtype=<span class="built_in">int</span>)</span><br><span class="line">    input_text = <span class="string">&quot;&quot;</span></span><br><span class="line">    active_cell = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        draw_grid(board, input_text)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">                <span class="keyword">if</span> event.key == pygame.K_RETURN:</span><br><span class="line">                    solved_board = solve_sudoku(board.copy())</span><br><span class="line">                    <span class="keyword">if</span> solved_board <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;No solution exists&quot;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        board = solved_board</span><br><span class="line">                <span class="keyword">elif</span> event.key == pygame.K_BACKSPACE:</span><br><span class="line">                    board = np.zeros((GRID_SIZE, GRID_SIZE), dtype=<span class="built_in">int</span>)</span><br><span class="line">                <span class="keyword">elif</span> event.key == pygame.K_c:</span><br><span class="line">                    board = np.zeros((GRID_SIZE, GRID_SIZE), dtype=<span class="built_in">int</span>)</span><br><span class="line">                <span class="keyword">elif</span> event.key <span class="keyword">in</span> <span class="built_in">range</span>(pygame.K_1, pygame.K_9 + <span class="number">1</span>):</span><br><span class="line">                    num = event.key - pygame.K_0</span><br><span class="line">                    <span class="keyword">if</span> active_cell:</span><br><span class="line">                        row, col = active_cell</span><br><span class="line">                        board[row][col] = num</span><br><span class="line">                <span class="keyword">elif</span> event.key == pygame.K_ESCAPE:</span><br><span class="line">                    input_text = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">                pos = pygame.mouse.get_pos()</span><br><span class="line">                row, col = pos[<span class="number">1</span>] // CELL_SIZE, pos[<span class="number">0</span>] // CELL_SIZE</span><br><span class="line">                <span class="keyword">if</span> event.button == <span class="number">1</span>:  <span class="comment"># Left click</span></span><br><span class="line">                    active_cell = (row, col)</span><br><span class="line">                    input_text = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="keyword">elif</span> event.button == <span class="number">3</span>:  <span class="comment"># Right click</span></span><br><span class="line">                    board[row][col] = <span class="number">0</span></span><br><span class="line">                    active_cell = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.TEXTINPUT:</span><br><span class="line">                <span class="keyword">if</span> active_cell:</span><br><span class="line">                    input_text += event.text</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(input_text) &gt; <span class="number">1</span>:</span><br><span class="line">                        input_text = input_text[-<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">if</span> input_text.isdigit() <span class="keyword">and</span> <span class="number">1</span> &lt;= <span class="built_in">int</span>(input_text) &lt;= <span class="number">9</span>:</span><br><span class="line">                        row, col = active_cell</span><br><span class="line">                        board[row][col] = <span class="built_in">int</span>(input_text)</span><br><span class="line">                        input_text = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠标拖尾效果</title>
    <url>/2024/07/21/%E9%BC%A0%E6%A0%87%E6%8B%96%E5%B0%BE/</url>
    <content><![CDATA[<p>突发奇想，在学习python的时候，想要弄一个鼠标拖尾的这样一个东西，下面是我的学习思路</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>首先，我们要初始化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化 pygame</span></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置屏幕尺寸和背景颜色</span></span><br><span class="line">width, height = <span class="number">800</span>, <span class="number">600</span></span><br><span class="line">screen = pygame.display.set_mode((width, height))  <span class="comment"># 创建一个宽800，高600的屏幕</span></span><br><span class="line">background_color = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 黑色背景</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图像</span></span><br><span class="line">heart_image = pygame.image.load(<span class="string">&#x27;python\\鼠标拖尾\\img\\爱心.png&#x27;</span>)  <span class="comment"># 加载图像</span></span><br><span class="line">heart_image = pygame.transform.scale(heart_image, (<span class="number">50</span>, <span class="number">50</span>))  <span class="comment"># 调整图像大小为50x50像素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个存储爱心位置和透明度的列表</span></span><br><span class="line">trails = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:<span class="comment">#是否点击了x</span></span><br><span class="line">            pygame.quit()  <span class="comment"># 退出游戏</span></span><br><span class="line">            sys.exit()  <span class="comment"># 结束程序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取鼠标位置</span></span><br><span class="line">    mouse_x, mouse_y = pygame.mouse.get_pos()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将鼠标位置和透明度（逐渐减少）添加到拖尾列表</span></span><br><span class="line">    trails.append((mouse_x, mouse_y, <span class="number">255</span>))  <span class="comment"># 255表示完全不透明</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充屏幕</span></span><br><span class="line">    screen.fill(background_color)  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制拖尾</span></span><br><span class="line">    <span class="keyword">for</span> (x, y, alpha) <span class="keyword">in</span> trails:</span><br><span class="line">        <span class="comment"># 创建一个具有透明度的图像</span></span><br><span class="line">        heart_with_alpha = heart_image.copy()</span><br><span class="line">        heart_with_alpha.set_alpha(alpha)</span><br><span class="line">        <span class="comment"># 绘制图像</span></span><br><span class="line">        screen.blit(heart_with_alpha, (x - <span class="number">25</span>, y - <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新拖尾列表中的透明度</span></span><br><span class="line">    trails = [(x, y, alpha - <span class="number">5</span>) <span class="keyword">for</span> (x, y, alpha) <span class="keyword">in</span> trails <span class="keyword">if</span> alpha &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    pygame.display.flip()  <span class="comment"># 更新显示</span></span><br><span class="line">    pygame.time.delay(<span class="number">30</span>)  <span class="comment"># 控制更新频率</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​	运行之后，如图所示，现在只是一个跟随鼠标移动图像,我们通过记录鼠标位置及透明度，逐渐绘制多个逐渐透明的爱心图像，从而在屏幕上产生拖尾效果。</p>
<p><img src="https://s2.loli.net/2024/07/21/Tra2cMPftldAq6Z.png" alt="image.png"></p>
<h3 id="创建简单的粒子类"><a href="#创建简单的粒子类" class="headerlink" title="创建简单的粒子类"></a>创建简单的粒子类</h3><p>如果这样就结束的话，未免也太过单调了，又想了想，感觉加上粒子效果很不错</p>
<p>我们先从最基本的粒子类开始，只展示一个静态的粒子图像，不涉及颜色调整和生命周期管理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 粒子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Particle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = x  <span class="comment"># 粒子x坐标</span></span><br><span class="line">        <span class="variable language_">self</span>.y = y  <span class="comment"># 粒子y坐标</span></span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="number">25</span>  <span class="comment"># 粒子大小</span></span><br><span class="line">        <span class="variable language_">self</span>.image = pygame.transform.scale(heart_image, (<span class="variable language_">self</span>.size, <span class="variable language_">self</span>.size))  <span class="comment"># 调整图像大小</span></span><br><span class="line">        <span class="variable language_">self</span>.alpha = <span class="number">255</span>  <span class="comment"># 初始透明度</span></span><br><span class="line">        <span class="variable language_">self</span>.speed = random.uniform(<span class="number">1</span>, <span class="number">5</span>)  <span class="comment"># 随机速度</span></span><br><span class="line">        <span class="variable language_">self</span>.angle = random.uniform(<span class="number">0</span>, <span class="number">2</span> * math.pi)  <span class="comment"># 随机方向（以弧度表示）</span></span><br><span class="line">        <span class="variable language_">self</span>.dx = <span class="variable language_">self</span>.speed * math.cos(<span class="variable language_">self</span>.angle)  <span class="comment"># x方向速度分量</span></span><br><span class="line">        <span class="variable language_">self</span>.dy = <span class="variable language_">self</span>.speed * math.sin(<span class="variable language_">self</span>.angle)  <span class="comment"># y方向速度分量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self, screen</span>):</span><br><span class="line">        <span class="comment"># 创建一个具有当前透明度的图像</span></span><br><span class="line">        heart_with_alpha = <span class="variable language_">self</span>.image.copy()</span><br><span class="line">        heart_with_alpha.set_alpha(<span class="variable language_">self</span>.alpha)</span><br><span class="line">        <span class="comment"># 绘制图像</span></span><br><span class="line">        screen.blit(heart_with_alpha, (<span class="variable language_">self</span>.x - <span class="variable language_">self</span>.size // <span class="number">2</span>, <span class="variable language_">self</span>.y - <span class="variable language_">self</span>.size // <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 更新粒子的坐标</span></span><br><span class="line">        <span class="variable language_">self</span>.x += <span class="variable language_">self</span>.dx</span><br><span class="line">        <span class="variable language_">self</span>.y += <span class="variable language_">self</span>.dy</span><br><span class="line">        <span class="comment"># 逐渐减少粒子的透明度</span></span><br><span class="line">        <span class="variable language_">self</span>.alpha -= <span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.alpha &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.alpha = <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>加上这些粒子类，再运行</p>
<p><img src="https://s2.loli.net/2024/07/21/k4mxQzS5OGJYh9X.png" alt="image.png"></p>
<p>​	emmm……有粒子效果了，但是看不清中间的图像了，并且粒子效果太散了，并且粒子要到好远才会消失，我们继续进行优化。调整以下几个方面：</p>
<ul>
<li><strong>调整粒子的速度和生命周期</strong>:<ul>
<li>让粒子的速度慢一点，这样它们不会散得太远，效果就会更好看。</li>
<li>设置粒子有个“使用期限”，比如它们会在一段时间后自动消失，这样就不会变得太散乱。</li>
</ul>
</li>
<li><strong>确保中心图像清晰</strong>:<ul>
<li>确保中间的图像依然清晰可见。可以通过减少粒子的数量或增加它们的透明度来做到这一点。</li>
</ul>
</li>
<li><strong>控制粒子的数量和透明度</strong>:<ul>
<li>每次生成的粒子数量可以控制一下，避免太多粒子影响效果。</li>
<li>让粒子在消失前有足够的透明度，这样不会遮挡住中心的图像。</li>
</ul>
</li>
</ul>
<p>我们把粒子大小设为5；粒子的生命周期设置为20-60帧，使它不会停留太久；在主循环里 我们设置每次移动鼠标时，只生成5个粒子(之前是10个)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 粒子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Particle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = x  <span class="comment"># 粒子x坐标</span></span><br><span class="line">        <span class="variable language_">self</span>.y = y  <span class="comment"># 粒子y坐标</span></span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="number">5</span>  <span class="comment"># 粒子大小（减小到5）</span></span><br><span class="line">        <span class="variable language_">self</span>.image = pygame.transform.scale(heart_image, (<span class="variable language_">self</span>.size, <span class="variable language_">self</span>.size))  <span class="comment"># 调整图像大小</span></span><br><span class="line">        <span class="variable language_">self</span>.alpha = <span class="number">255</span>  <span class="comment"># 初始透明度</span></span><br><span class="line">        <span class="variable language_">self</span>.speed = random.uniform(<span class="number">2</span>, <span class="number">4</span>)  <span class="comment"># 随机速度（减小范围）</span></span><br><span class="line">        <span class="variable language_">self</span>.angle = random.uniform(<span class="number">0</span>, <span class="number">2</span> * math.pi)  <span class="comment"># 随机方向（以弧度表示）</span></span><br><span class="line">        <span class="variable language_">self</span>.dx = <span class="variable language_">self</span>.speed * math.cos(<span class="variable language_">self</span>.angle)  <span class="comment"># x方向速度分量</span></span><br><span class="line">        <span class="variable language_">self</span>.dy = <span class="variable language_">self</span>.speed * math.sin(<span class="variable language_">self</span>.angle)  <span class="comment"># y方向速度分量</span></span><br><span class="line">        <span class="variable language_">self</span>.life = random.uniform(<span class="number">20</span>, <span class="number">60</span>)  <span class="comment"># 粒子的生命周期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self, screen</span>):</span><br><span class="line">        <span class="comment"># 创建一个具有当前透明度的图像</span></span><br><span class="line">        heart_with_alpha = <span class="variable language_">self</span>.image.copy()</span><br><span class="line">        heart_with_alpha.set_alpha(<span class="variable language_">self</span>.alpha)</span><br><span class="line">        <span class="comment"># 绘制图像</span></span><br><span class="line">        screen.blit(heart_with_alpha, (<span class="variable language_">self</span>.x - <span class="variable language_">self</span>.size // <span class="number">2</span>, <span class="variable language_">self</span>.y - <span class="variable language_">self</span>.size // <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 更新粒子的坐标</span></span><br><span class="line">        <span class="variable language_">self</span>.x += <span class="variable language_">self</span>.dx</span><br><span class="line">        <span class="variable language_">self</span>.y += <span class="variable language_">self</span>.dy</span><br><span class="line">        <span class="comment"># 逐渐减少粒子的透明度</span></span><br><span class="line">        <span class="variable language_">self</span>.alpha -= <span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.alpha &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.alpha = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 减少生命周期</span></span><br><span class="line">        <span class="variable language_">self</span>.life -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.life &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.alpha = <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如图</p>
<p><img src="https://s2.loli.net/2024/07/21/U92S7RFAjfMoueY.png" alt="image.png"></p>
<p>感觉还行，差不多了，后面就是添加颜色了，添加颜色比较简单，只需要在粒子类里进行修改就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="variable language_">self</span>.color = (random.randint(<span class="number">100</span>, <span class="number">255</span>), random.randint(<span class="number">100</span>, <span class="number">255</span>), random.randint(<span class="number">100</span>, <span class="number">255</span>))  <span class="comment"># 随机颜色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self, screen</span>):</span><br><span class="line">    <span class="comment"># 创建一个具有当前透明度和颜色的图像</span></span><br><span class="line">    heart_with_alpha = <span class="variable language_">self</span>.image.copy()</span><br><span class="line">    heart_with_alpha.fill(<span class="variable language_">self</span>.color, special_flags=pygame.BLEND_MULT)  <span class="comment"># 应用颜色</span></span><br><span class="line">    heart_with_alpha.set_alpha(<span class="variable language_">self</span>.alpha)</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/07/21/nAvhgUeNcOIoLaB.png" alt="image.png"></p>
<p>完整代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 </span></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置屏幕</span></span><br><span class="line">width, height = <span class="number">800</span>, <span class="number">600</span></span><br><span class="line">screen = pygame.display.set_mode((width, height))  <span class="comment"># 创建一个宽800，高600的屏幕</span></span><br><span class="line">background_color = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 黑色背景</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图像</span></span><br><span class="line">heart_image = pygame.image.load(<span class="string">&#x27;python\\鼠标拖尾\\img\\爱心.png&#x27;</span>)  <span class="comment"># 加载图像</span></span><br><span class="line">heart_image = pygame.transform.scale(heart_image, (<span class="number">50</span>, <span class="number">50</span>))  <span class="comment"># 调整图像大小为50x50像素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 粒子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Particle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = x  <span class="comment"># 粒子x坐标</span></span><br><span class="line">        <span class="variable language_">self</span>.y = y  <span class="comment"># 粒子y坐标</span></span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="number">5</span>  <span class="comment"># 粒子大小</span></span><br><span class="line">        <span class="variable language_">self</span>.image = pygame.transform.scale(heart_image, (<span class="variable language_">self</span>.size, <span class="variable language_">self</span>.size))  <span class="comment"># 调整图像大小</span></span><br><span class="line">        <span class="variable language_">self</span>.alpha = <span class="number">255</span>  <span class="comment"># 初始透明度</span></span><br><span class="line">        <span class="variable language_">self</span>.speed = random.uniform(<span class="number">2</span>, <span class="number">4</span>)  <span class="comment"># 随机速度</span></span><br><span class="line">        <span class="variable language_">self</span>.angle = random.uniform(<span class="number">0</span>, <span class="number">2</span> * math.pi)  <span class="comment"># 随机方向(以弧度表示)</span></span><br><span class="line">        <span class="variable language_">self</span>.dx = <span class="variable language_">self</span>.speed * math.cos(<span class="variable language_">self</span>.angle)  <span class="comment"># x方向速度分量</span></span><br><span class="line">        <span class="variable language_">self</span>.dy = <span class="variable language_">self</span>.speed * math.sin(<span class="variable language_">self</span>.angle)  <span class="comment"># y方向速度分量</span></span><br><span class="line">        <span class="variable language_">self</span>.life = random.uniform(<span class="number">20</span>, <span class="number">60</span>)  <span class="comment"># 粒子的生命周期</span></span><br><span class="line">        <span class="variable language_">self</span>.color = (random.randint(<span class="number">100</span>, <span class="number">255</span>), random.randint(<span class="number">100</span>, <span class="number">255</span>), random.randint(<span class="number">100</span>, <span class="number">255</span>))  <span class="comment"># 随机颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self, screen</span>):</span><br><span class="line">        <span class="comment"># 创建一个具有当前透明度和颜色的图像</span></span><br><span class="line">        heart_with_alpha = <span class="variable language_">self</span>.image.copy()</span><br><span class="line">        heart_with_alpha.fill(<span class="variable language_">self</span>.color, special_flags=pygame.BLEND_MULT)  <span class="comment"># 应用颜色</span></span><br><span class="line">        heart_with_alpha.set_alpha(<span class="variable language_">self</span>.alpha)</span><br><span class="line">        <span class="comment"># 绘制图像</span></span><br><span class="line">        screen.blit(heart_with_alpha, (<span class="variable language_">self</span>.x - <span class="variable language_">self</span>.size // <span class="number">2</span>, <span class="variable language_">self</span>.y - <span class="variable language_">self</span>.size // <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 更新粒子的坐标</span></span><br><span class="line">        <span class="variable language_">self</span>.x += <span class="variable language_">self</span>.dx</span><br><span class="line">        <span class="variable language_">self</span>.y += <span class="variable language_">self</span>.dy</span><br><span class="line">        <span class="comment"># 逐渐减少粒子的透明度</span></span><br><span class="line">        <span class="variable language_">self</span>.alpha -= <span class="number">5</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.alpha &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.alpha = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 减少生命周期</span></span><br><span class="line">        <span class="variable language_">self</span>.life -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.life &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.alpha = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主循环</span></span><br><span class="line">particles = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            pygame.quit()  <span class="comment"># 退出游戏</span></span><br><span class="line">            sys.exit()  <span class="comment"># 结束程序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取鼠标位置</span></span><br><span class="line">    mouse_x, mouse_y = pygame.mouse.get_pos()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建多个粒子</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># 每次鼠标移动时创建5个粒子</span></span><br><span class="line">        particles.append(Particle(mouse_x, mouse_y))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清屏</span></span><br><span class="line">    screen.fill(background_color)  <span class="comment"># 将屏幕填充为黑色背景</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制中心图像</span></span><br><span class="line">    screen.blit(heart_image, (mouse_x - <span class="number">25</span>, mouse_y - <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新并绘制粒子</span></span><br><span class="line">    <span class="keyword">for</span> particle <span class="keyword">in</span> particles:</span><br><span class="line">        particle.update()</span><br><span class="line">        particle.draw(screen)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移除已完全透明的粒子</span></span><br><span class="line">    particles = [particle <span class="keyword">for</span> particle <span class="keyword">in</span> particles <span class="keyword">if</span> particle.alpha &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    pygame.display.flip()  <span class="comment"># 更新显示</span></span><br><span class="line">    pygame.time.delay(<span class="number">30</span>)  <span class="comment"># 控制更新频率</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
</search>
